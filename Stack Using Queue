//ðŸ‘‰ Using two queue
//ðŸŽ¯ . Add element in q2
      . move  element from q1 to q2
      . swap(q1,q2)

class MyStack {
    private:
    queue<int>q1;
    queue<int>q2;
public:
    MyStack() {
        
    }
    
    void push(int x) {
       q2.push(x);
       while(!q1.empty()){
           int a=q1.front();
           q2.push(a);
           q1.pop();
       }
       swap(q1,q2);
    }
    
    int pop() {
        if(!q1.empty()){
            int a=q1.front();
            q1.pop();
         return  a;
        }
        return -1;
    }
    
    int top() {
        if(!q1.empty()){
        return q1.front();
        }
        return -1;
    }
    
    bool empty() {
        return (q1.size()==0)?1 :0;
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */
----------------------------------------------------------------

//ðŸ‘‰ Using two queue
/*ðŸŽ¯  .Add element in queue
       .pop element from queue's front and push back to same queue till q.size()-1;*/


class MyStack {
    private:
    queue<int>q;
public:
    MyStack() {
        
    }
    
    void push(int x) {
        q.push(x);
        int n=q.size();
        for(int i=1;i<n;i++){
            int a=q.front();
            q.push(a);
            q.pop();
        }
    }
    
    int pop() {
        if(!q.empty()){
            int a=q.front();
            q.pop();
            return a;
        }
        return -1;
    }
    
    int top() {
        if(!q.empty()){
            int a=q.front();
            return a;
        }
        return -1;
    }
    
    bool empty() {
        return (q.size()==0)?1:0;
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */


